{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactOwnApi/frontend/src/App.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      isLoading: true,\n      errors: null\n    };\n  }\n\n  // Now we're going to make a request for data using axios\n  getPosts() {\n    axios // This is where the data is hosted\n    .get(\"http://localhost:3210/data\") // Once we get a response and store data, let's change the loading state\n    .then(response => {\n      this.setState({\n        posts: response.data.posts,\n        isLoading: false\n      });\n    }).then(function (data) {\n      self.setState({\n        post: data\n      });\n    }) // If we catch any errors connecting, let's update accordingly\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  } // Let's our app know we're ready to render the data\n\n\n  componentDidMount() {\n    this.getPosts();\n  } // Putting that data to use\n\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          posts = _this$state.posts;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Random Post\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, !isLoading ? posts && posts.map(post => {\n      const id = post.id,\n            event_title = post.event_title,\n            event_venue = post.event_venue;\n      return React.createElement(\"div\", {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, event_title), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, event_venue), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/ReactOwnApi/frontend/src/App.js"],"names":["React","axios","App","Component","state","posts","isLoading","errors","getPosts","get","then","response","setState","data","self","post","catch","error","componentDidMount","render","map","id","event_title","event_venue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADwB;AAAA;;AAMhC;AACAC,EAAAA,QAAQ,GAAG;AACTP,IAAAA,KAAK,CACH;AADG,KAEFQ,GAFH,CAEO,4BAFP,EAGE;AAHF,KAIGC,IAJH,CAIQC,QAAQ,IAAI;AAChB,WAAKC,QAAL,CAAc;AACZP,QAAAA,KAAK,EAAEM,QAAQ,CAACE,IAAT,CAAcR,KADT;AAEZC,QAAAA,SAAS,EAAE;AAFC,OAAd;AAID,KATH,EAUGI,IAVH,CAUQ,UAASG,IAAT,EAAe;AACnBC,MAAAA,IAAI,CAACF,QAAL,CAAc;AAACG,QAAAA,IAAI,EAAEF;AAAP,OAAd;AACH,KAZD,EAaE;AAbF,KAcGG,KAdH,CAcSC,KAAK,IAAI,KAAKL,QAAL,CAAc;AAAEK,MAAAA,KAAF;AAASX,MAAAA,SAAS,EAAE;AAApB,KAAd,CAdlB;AAeD,GAvB+B,CA0BhC;;;AACAY,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,QAAL;AACD,GA7B+B,CAgChC;;;AACAW,EAAAA,MAAM,GAAG;AAAA,wBACsB,KAAKf,KAD3B;AAAA,UACCE,SADD,eACCA,SADD;AAAA,UACYD,KADZ,eACYA,KADZ;AAEP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACC,SAAD,GACCD,KAAK,IAAIA,KAAK,CAACe,GAAN,CAAUL,IAAI,IAAI;AAAA,YACjBM,EADiB,GACgBN,IADhB,CACjBM,EADiB;AAAA,YACbC,WADa,GACgBP,IADhB,CACbO,WADa;AAAA,YACAC,WADA,GACgBR,IADhB,CACAQ,WADA;AAEzB,aACE;AAAK,QAAA,GAAG,EAAEF,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMC,WAAN,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,WAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF;AAOD,KATQ,CADV,GAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbJ,CAFF,CADF;AAqBD;;AAxD+B;;AA0DlC,eAAerB,GAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\n\nclass App extends React.Component {\n  state = {\n    posts: [],\n    isLoading: true,\n    errors: null\n  };\n  // Now we're going to make a request for data using axios\n  getPosts() {\n    axios\n      // This is where the data is hosted\n      .get(\"http://localhost:3210/data\")\n      // Once we get a response and store data, let's change the loading state\n      .then(response => {\n        this.setState({\n          posts: response.data.posts,\n          isLoading: false\n        });\n      })\n      .then(function(data) {\n        self.setState({post: data});\n    })\n      // If we catch any errors connecting, let's update accordingly\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n    \n  \n  // Let's our app know we're ready to render the data\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  \n  // Putting that data to use\n  render() {\n    const { isLoading, posts } = this.state;\n    return (\n      <React.Fragment>\n        <h2>Random Post</h2>\n        <div>\n          {!isLoading ? (\n            posts && posts.map(post => {\n              const { id, event_title, event_venue } = post;\n              return (\n                <div key={id}>\n                  <h2>{ event_title}</h2>\n                  <p>{event_venue}</p>\n                  <hr />\n                </div>\n              );\n            })\n          ) : (\n            <p>Loading...</p>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default App; "]},"metadata":{},"sourceType":"module"}