{"ast":null,"code":"var _jsxFileName = \"/var/www/html/ReactOwnApi/frontend/src/App.js\";\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: [],\n      isLoading: true,\n      errors: null\n    };\n  }\n\n  // Now we're going to make a request for data using axios\n  getPosts() {\n    axios // This is where the data is hosted\n    .get(\"http://localhost:3210\") // Once we get a response and store data, let's change the loading state\n    .then(response => response.data.results.map(event => ({\n      id: \"\".concat(event.id),\n      event_title: \"\".concat(event.event_title),\n      event_venue: \"\".concat(event.event_venue),\n      events_coodinates: \"\".concat(event.events_coodinates)\n    }))).then(response => {\n      this.setState({\n        posts: response.data.posts,\n        isLoading: false\n      });\n    }) // If we catch any errors connecting, let's update accordingly\n    .catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  } // Let's our app know we're ready to render the data\n\n\n  componentDidMount() {\n    this.getPosts();\n  } // Putting that data to use\n\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          posts = _this$state.posts;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Random Post\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, !isLoading ? posts.map(post => {\n      const id = post.id,\n            event_title = post.event_title,\n            event_venue = post.event_venue,\n            events_coodinates = post.events_coodinates;\n      return React.createElement(\"div\", {\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, event_title), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, event_venue), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, events_coodinates), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/var/www/html/ReactOwnApi/frontend/src/App.js"],"names":["React","axios","App","Component","state","posts","isLoading","errors","getPosts","get","then","response","data","results","map","event","id","event_title","event_venue","events_coodinates","setState","catch","error","componentDidMount","render","post"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,SAAS,EAAE,IAFL;AAGNC,MAAAA,MAAM,EAAE;AAHF,KAFwB;AAAA;;AAOhC;AACAC,EAAAA,QAAQ,GAAG;AACTP,IAAAA,KAAK,CACH;AADG,KAEFQ,GAFH,CAEO,uBAFP,EAGE;AAHF,KAIGC,IAJH,CAIQC,QAAQ,IACZA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBC,GAAtB,CAA0BC,KAAK,KAAI;AACjCC,MAAAA,EAAE,YAAKD,KAAK,CAACC,EAAX,CAD+B;AAEjCC,MAAAA,WAAW,YAAKF,KAAK,CAACE,WAAX,CAFsB;AAGjCC,MAAAA,WAAW,YAAKH,KAAK,CAACG,WAAX,CAHsB;AAIjCC,MAAAA,iBAAiB,YAAKJ,KAAK,CAACI,iBAAX;AAJgB,KAAJ,CAA/B,CALJ,EAYGT,IAZH,CAYQC,QAAQ,IAAI;AAChB,WAAKS,QAAL,CAAc;AACZf,QAAAA,KAAK,EAAEM,QAAQ,CAACC,IAAT,CAAcP,KADT;AAEZC,QAAAA,SAAS,EAAE;AAFC,OAAd;AAID,KAjBH,EAkBE;AAlBF,KAmBGe,KAnBH,CAmBSC,KAAK,IAAI,KAAKF,QAAL,CAAc;AAAEE,MAAAA,KAAF;AAAShB,MAAAA,SAAS,EAAE;AAApB,KAAd,CAnBlB;AAoBD,GA7B+B,CA8BhC;;;AACAiB,EAAAA,iBAAiB,GAAG;AAClB,SAAKf,QAAL;AACD,GAjC+B,CAkChC;;;AACAgB,EAAAA,MAAM,GAAG;AAAA,wBACsB,KAAKpB,KAD3B;AAAA,UACCE,SADD,eACCA,SADD;AAAA,UACYD,KADZ,eACYA,KADZ;AAEP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACC,SAAD,GACCD,KAAK,CAACS,GAAN,CAAUW,IAAI,IAAI;AAAA,YACRT,EADQ,GAC4CS,IAD5C,CACRT,EADQ;AAAA,YACJC,WADI,GAC4CQ,IAD5C,CACJR,WADI;AAAA,YACSC,WADT,GAC4CO,IAD5C,CACSP,WADT;AAAA,YACsBC,iBADtB,GAC4CM,IAD5C,CACsBN,iBADtB;AAEhB,aACE;AAAK,QAAA,GAAG,EAAEH,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKC,WAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,WAAJ,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIC,iBAAJ,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADF;AAQD,KAVD,CADD,GAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdJ,CAFF,CADF;AAsBD;;AA3D+B;;AA6DlC,eAAejB,GAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  // State will apply to the posts object which is set to loading by default\n  state = {\n    posts: [],\n    isLoading: true,\n    errors: null\n  };\n  // Now we're going to make a request for data using axios\n  getPosts() {\n    axios\n      // This is where the data is hosted\n      .get(\"http://localhost:3210\")\n      // Once we get a response and store data, let's change the loading state\n      .then(response =>\n        response.data.results.map(event=> ({\n          id: `${event.id}`,\n          event_title: `${event.event_title}`,\n          event_venue: `${event.event_venue}`,\n          events_coodinates: `${event.events_coodinates}`\n        }))\n      )\n      .then(response => {\n        this.setState({\n          posts: response.data.posts,\n          isLoading: false\n        });\n      })\n      // If we catch any errors connecting, let's update accordingly\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n  // Let's our app know we're ready to render the data\n  componentDidMount() {\n    this.getPosts();\n  }\n  // Putting that data to use\n  render() {\n    const { isLoading, posts } = this.state;\n    return (\n      <React.Fragment>\n        <h2>Random Post</h2>\n        <div>\n          {!isLoading ? (\n            posts.map(post => {\n              const { id, event_title, event_venue, events_coodinates } = post;\n              return (\n                <div key={id}>\n                  <h2>{event_title}</h2>\n                  <p>{event_venue}</p>\n                  <p>{events_coodinates}</p>\n                  <hr />\n                </div>\n              );\n            })\n          ) : (\n            <p>Loading...</p>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}